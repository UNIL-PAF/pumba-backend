# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# Home page
GET     /                                                                               ch.unil.paf.pumba.controllers.HomeController.index

# upload MaxQuant data
POST /upload/:dataSetName/sample/:sample/color-group/:colorGroup/organism/:organism     ch.unil.paf.pumba.controllers.UploadMaxQuantController.uploadZipFile(dataSetName: String, sample: String, colorGroup: Int, organism: String, lowDensityThreshold: Option[Int], ignoreSlices: Option[String], sampleName: Option[String])

# get the protein infos
GET /merge-protein/:proteinId/organism/:organism                                        ch.unil.paf.pumba.controllers.ProteinsController.mergeProteins(proteinId: String, organism: String, dataSetsString: Option[String], isoformId: Option[Int])

# upload sequence data from FASTA file
POST /sequence/:dataBaseName/organism/:organismName                                     ch.unil.paf.pumba.controllers.UploadSequencesController.uploadFastaFile(dataBaseName: String, organismName: String)

# get a sequence
GET /sequence/:proteinId/database/:dataBaseName                                         ch.unil.paf.pumba.controllers.SequenceController.getSequence(proteinId: String, dataBaseName: String)

# get the sequence string
GET /sequence-string/:term/organism/:organismName                                       ch.unil.paf.pumba.controllers.SequenceController.getSequenceString(term: String, organismName: String)

# delete whole dataset including protein data
DELETE /dataset/:dataSetId                                                              ch.unil.paf.pumba.controllers.DataSetController.deleteDataSet(dataSetId: String)

# list all available datasets
GET /dataset                                                                            ch.unil.paf.pumba.controllers.DataSetController.listDataSets

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                                                   controllers.Assets.versioned(path="/public", file: Asset)


